#machineFunctions.rb
         def doNOP( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doRST( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doBRK( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doCALL( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doRET( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doRETI( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doBEQZ( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doBNEQZ( executionList , operand  )        ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doBPOS( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doBNEG( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doBXEQZ( executionList , operand  )        ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doBXNEQZ( executionList , operand  )       ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doBYEQZ( executionList , operand  )        ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doBYNEQZ( executionList , operand  )       ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doDXSZ( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doJMPR( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doJMPA( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doPUSHA( executionList , operand  )        ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doPUSHX( executionList , operand  )        ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doPUSHY( executionList , operand  )        ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doPUSHF( executionList , operand  )        ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doPUSHPC( executionList , operand  )       ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doPOPA( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doPOPX( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doPOPY( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doPOPF( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doPOPPC( executionList , operand  )        ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doLDAI( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doLDA( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doLDAIX( executionList , operand  )        ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doLDAII( executionList , operand  )        ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doLDXI( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doLDX( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doLDYI( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doLDY( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doSTA( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doSTAIX( executionList , operand  )        ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doSTAII( executionList , operand  )        ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doSTX( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doSTY( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doINCA( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doINCX( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doINCY( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doDECA( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doDECX( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doDECY( executionList , operand  )         ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doTAX( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doTAY( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doTXA( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doTYA( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doTXY( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doTYX( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doAND( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doOR( executionList , operand  )           ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doNOT( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doXOR( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doLSL( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doLSR( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doADD( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doSUB( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
         def doCLC( executionList , operand  )          ; outcome = ["DE","AD","BE","EF" ] ; return outcome ;  end ;
